package com.uzh.ase.dailygrind.userservice.user.mapper;

import com.uzh.ase.dailygrind.userservice.user.controller.dto.UserDto;
import com.uzh.ase.dailygrind.userservice.user.controller.dto.UserEducationDto;
import com.uzh.ase.dailygrind.userservice.user.controller.dto.UserJobDto;
import com.uzh.ase.dailygrind.userservice.user.repository.entity.UserEducationEntity;
import com.uzh.ase.dailygrind.userservice.user.repository.entity.UserEntity;
import com.uzh.ase.dailygrind.userservice.user.repository.entity.UserJobEntity;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;


class UserMapperTest {

    private final UserMapper mapper = Mappers.getMapper(UserMapper.class);

    @Nested
    class GenerateIdTests {

        @Test
        void generatesIdWithPrefixAndPostfix() {
            String result = mapper.generateId("USER", "JOB", "abc123");
            assertThat(result).isEqualTo("USER#abc123#JOB");
        }

        @Test
        void omitsPrefixIfIdAlreadyStartsWithIt() {
            String result = mapper.generateId("USER", "POST", "USER#abc123");
            assertThat(result).isEqualTo("USER#abc123#POST");
        }

        @Test
        void omitsPostfixIfIdAlreadyEndsWithIt() {
            String result = mapper.generateId("PRE", "POST", "abc123#POST");
            assertThat(result).isEqualTo("PRE#abc123#POST");
        }

        @Test
        void handlesNullPrefixAndPostfix() {
            String result = mapper.generateId(null, null, "abc123");
            assertThat(result).isEqualTo("abc123");
        }

        @Test
        void generatesNewUUIDIfIdIsNull() {
            String result = mapper.generateId("USER", "EDU", null);
            assertThat(result).startsWith("USER#");
            assertThat(result).endsWith("#EDU");
            assertThat(result.length()).isGreaterThan(10);
        }

        @Test
        void handlesNullPrefixWithAutoGeneratedId() {
            String result = mapper.generateId(null, "X", null);
            assertThat(result).doesNotStartWith("#");
            assertThat(result).endsWith("#X");
        }

        @Test
        void handlesNullPostfixWithAutoGeneratedId() {
            String result = mapper.generateId("X", null, null);
            assertThat(result).startsWith("X#");
            assertThat(result).doesNotEndWith("#");
        }
    }


    @Nested
    class ToUserEntityTests {

        @Test
        void shouldMapDtoToEntityWithGeneratedPkAndSk() {
            String userId = "12345";
            UserDto dto = new UserDto(
                    userId,
                    "test@example.com",
                    "Alice",
                    "Smith",
                    "2000-01-01",
                    "Zurich",
                    List.of(),
                    List.of()
            );

            UserEntity entity = mapper.toUserEntity(userId, dto);

            assertThat(entity)
                    .isNotNull()
                    .extracting(
                            UserEntity::getPk,
                            UserEntity::getSk,
                            UserEntity::getEmail,
                            UserEntity::getFirstName,
                            UserEntity::getLastName,
                            UserEntity::getBirthday,
                            UserEntity::getLocation
                    )
                    .containsExactly(
                            "USER#12345",
                            "USER#12345",
                            dto.email(),
                            dto.firstName(),
                            dto.lastName(),
                            dto.birthday(),
                            dto.location()
                    );
        }

        @Test
        void shouldHandleNullUserDto() {
            UserEntity entity = mapper.toUserEntity(null, null);
            assertThat(entity).isNull();
        }

        @Test
        void shouldHandleNullUserId() {
            UserDto dto = new UserDto(
                    null,
                    "test@example.com",
                    "Bob",
                    "Marley",
                    "1990-02-02",
                    "Bern",
                    List.of(),
                    List.of()
            );

            UserEntity entity = mapper.toUserEntity(null, dto);

            assertThat(entity)
                    .isNotNull()
                    .satisfies(e -> {
                        assertThat(e.getPk()).startsWith("USER#");
                        assertThat(e.getPk()).isEqualTo(e.getSk());
                    })
                    .extracting(
                            UserEntity::getEmail,
                            UserEntity::getFirstName,
                            UserEntity::getLastName,
                            UserEntity::getBirthday,
                            UserEntity::getLocation
                    )
                    .containsExactly(
                            dto.email(),
                            dto.firstName(),
                            dto.lastName(),
                            dto.birthday(),
                            dto.location()
                    );
        }

    }

    @Nested
    class ToUserJobDtoTests {

        @Test
        void shouldMapEntityToDtoCorrectly() {
            UserJobEntity entity = UserJobEntity.builder()
                    .pk("USER#123")
                    .sk("JOB#job789")
                    .jobStartDate("2022-01-01")
                    .jobEndDate("2023-01-01")
                    .jobTitle("Software Engineer")
                    .companyName("TechCorp")
                    .jobLocation("Zurich")
                    .jobDescription("Developed backend systems")
                    .build();

            UserJobDto dto = mapper.toUserJobDto(entity);

            assertThat(dto)
                    .isNotNull()
                    .extracting(
                            UserJobDto::jobId,
                            UserJobDto::startDate,
                            UserJobDto::endDate,
                            UserJobDto::jobTitle,
                            UserJobDto::companyName,
                            UserJobDto::location,
                            UserJobDto::description
                    )
                    .containsExactly(
                            "job789",
                            "2022-01-01",
                            "2023-01-01",
                            "Software Engineer",
                            "TechCorp",
                            "Zurich",
                            "Developed backend systems"
                    );
        }

        @Test
        void shouldReturnNullWhenEntityIsNull() {
            UserJobDto dto = mapper.toUserJobDto(null);
            assertThat(dto).isNull();
        }

        @Test
        void shouldHandleSkWithoutHashGracefully() {
            UserJobEntity entity = UserJobEntity.builder()
                    .sk("jobOnly")
                    .build();

            // This will likely throw IndexOutOfBoundsException unless you handle it in the mapper
            // So here we check that the mapper throws
            assertThatThrownBy(() -> mapper.toUserJobDto(entity))
                    .isInstanceOf(ArrayIndexOutOfBoundsException.class);
        }
    }

    @Nested
    class ToUserEducationDtoTests {

        @Test
        void shouldMapEntityToDtoCorrectly() {
            UserEducationEntity entity = UserEducationEntity.builder()
                    .pk("USER#123")
                    .sk("EDU#edu456")
                    .degree("Bachelor of Science")
                    .institution("UZH")
                    .startDate("2018-09-01")
                    .endDate("2021-06-30")
                    .fieldOfStudy("Computer Science")
                    .location("Zurich")
                    .description("Focused on software engineering and AI.")
                    .build();

            UserEducationDto dto = mapper.toUserEducationDto(entity);

            assertThat(dto)
                    .isNotNull()
                    .extracting(
                            UserEducationDto::educationId,
                            UserEducationDto::degree,
                            UserEducationDto::institution,
                            UserEducationDto::educationStartDate,
                            UserEducationDto::educationEndDate,
                            UserEducationDto::fieldOfStudy,
                            UserEducationDto::educationLocation,
                            UserEducationDto::educationDescription
                    )
                    .containsExactly(
                            "edu456",
                            "Bachelor of Science",
                            "UZH",
                            "2018-09-01",
                            "2021-06-30",
                            "Computer Science",
                            "Zurich",
                            "Focused on software engineering and AI."
                    );
        }

        @Test
        void shouldReturnNullWhenEntityIsNull() {
            UserEducationDto dto = mapper.toUserEducationDto(null);
            assertThat(dto).isNull();
        }

        @Test
        void shouldThrowExceptionIfSkIsMalformed() {
            UserEducationEntity entity = UserEducationEntity.builder()
                    .sk("malformedSk")
                    .build();

            assertThatThrownBy(() -> mapper.toUserEducationDto(entity))
                    .isInstanceOf(ArrayIndexOutOfBoundsException.class);
        }
    }

    @Nested
    class ToUserJobDtosTests {

        @Test
        void shouldMapEntitiesToDtos() {
            // Given
            UserJobEntity entity = UserJobEntity.builder()
                    .pk("USER#123")
                    .sk("JOB#job456")
                    .jobTitle("Engineer")
                    .companyName("TechCorp")
                    .jobStartDate("2022-01-01")
                    .jobEndDate("2023-01-01")
                    .jobLocation("Zurich")
                    .jobDescription("Worked on cool stuff.")
                    .build();

            // When
            List<UserJobDto> dtos = mapper.toUserJobDtos(List.of(entity));

            // Then
            assertThat(dtos).isNotNull()
                    .hasSize(1);

            UserJobDto dto = dtos.get(0);
            assertThat(dto).satisfies(d -> {
                assertThat(d.jobId()).isEqualTo("job456");
                assertThat(d.jobTitle()).isEqualTo("Engineer");
                assertThat(d.companyName()).isEqualTo("TechCorp");
                assertThat(d.startDate()).isEqualTo("2022-01-01");
                assertThat(d.endDate()).isEqualTo("2023-01-01");
                assertThat(d.location()).isEqualTo("Zurich");
                assertThat(d.description()).isEqualTo("Worked on cool stuff.");
            });
        }

        @Test
        void shouldReturnEmptyListWhenInputIsNull() {
            List<UserJobDto> dtos = mapper.toUserJobDtos(null);
            assertThat(dtos).isNotNull().isEmpty();
        }

        @Test
        void shouldReturnEmptyListWhenInputIsEmpty() {
            List<UserJobDto> dtos = mapper.toUserJobDtos(List.of());
            assertThat(dtos).isNotNull().isEmpty();
        }
    }

    @Nested
    class ToUserEducationDtosTests {

        @Test
        void shouldReturnEmptyListWhenInputIsNull() {
            List<UserEducationDto> result = mapper.toUserEducationDtos(null);

            assertThat(result).isEmpty();
        }

        @Test
        void shouldReturnEmptyListWhenInputIsEmpty() {
            List<UserEducationDto> result = mapper.toUserEducationDtos(List.of());

            assertThat(result).isEmpty();
        }

        @Test
        void shouldMapListOfEducationEntitiesToDtos() {
            List<UserEducationEntity> entities = List.of(
                    UserEducationEntity.builder()
                            .pk("USER#123")
                            .sk("EDU#abc")
                            .degree("BSc")
                            .institution("UZH")
                            .startDate("2015-01-01")
                            .endDate("2018-12-31")
                            .fieldOfStudy("Computer Science")
                            .location("Zurich")
                            .description("Bachelor studies")
                            .build()
            );

            List<UserEducationDto> result = mapper.toUserEducationDtos(entities);

            assertThat(result)
                    .hasSize(1)
                    .first()
                    .satisfies(dto -> {
                        assertThat(dto.educationId()).isEqualTo("abc");
                        assertThat(dto.degree()).isEqualTo("BSc");
                        assertThat(dto.institution()).isEqualTo("UZH");
                        assertThat(dto.educationStartDate()).isEqualTo("2015-01-01");
                        assertThat(dto.educationEndDate()).isEqualTo("2018-12-31");
                        assertThat(dto.fieldOfStudy()).isEqualTo("Computer Science");
                        assertThat(dto.educationLocation()).isEqualTo("Zurich");
                        assertThat(dto.educationDescription()).isEqualTo("Bachelor studies");
                    });
        }
    }

}